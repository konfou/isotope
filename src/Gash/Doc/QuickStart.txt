If you want to get started writing code in Gash, this doc is for you.  If you are
interested in developing Gash itself, read DevQuickStart.txt.

First, open a command shell.  Run Gash.exe.  It should give you all the usage info
you need to compile and run a Gash program.  Now let's make a Hello World app:

class MyClass(Object)
{
	proc main()
	{
		Console:out.print("Hello World")
	}
}

To run it, from a command prompt enter:

gash run hello.gash

Notice that you didn't have to compile it.  Gash is smart enough to figure out
that the code needed to be compiled first, so it compiled it in memory and then
ran it.  If you prefer to compile it yourself first, you can use this command:

gash build hello.gash

Now you need to learn some peculularities about the Gash language:

1- Every class must inherrit from some class.  In this example, MyClass
   inherrits from Object.  Object is a built-in class, and it happens to be
   the root of all classes.
2- You don't need semi-colons at the end of your lines.  Unlike languages that
   require semi-colons, you can't cram an entire program onto one line.  If that's
   important to you, you should use one of those languages.
3- Gash uses some unusual syntax for declaring variables.  Instead of declaring
   a variable first and then using it in subsequent commands, you do it all in
   one command.  For example, in C++ you would do this:
		SomeClass foo = new SomClass();
		int x;
		int y;
		foo.getCoords(&x, &y);
   The equivalent code in Gash would be:
		!SomeClass:foo.new()
		!Integer:x.new()
		!Integer:y.new()
		foo.getCoords(&x, &y)
   Note that all objects must be allocated, even Integers.
4- Gash is very strict about permission to modify variables.  Unlike the C++ const
   keyword, the default is read-only, and you can't bypass it in Gash.  So when you
   call a method, you need to put a "&" on your parameters if you want the method
   to be able to modify your objects.  And if you want the method to be able to
   change the variable (ie make it refer to a different object), you need to put
   a "!" on it.  Notice on the example code above in #3, there is a "!" in front
   of the declarations for "foo", "x", and "y"?  That's because the "new" method
   changes the variable from "null" to refer to the new object.
